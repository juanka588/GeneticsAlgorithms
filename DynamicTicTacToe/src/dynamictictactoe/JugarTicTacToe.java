/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dynamictictactoe;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author JuanCamilo
 */
public class JugarTicTacToe extends javax.swing.JFrame {

    JButton[] botones;
    JLabel paneles[];
    int curState[];
    public TicTacToePlayer cpu;
    int countX = 0;
    int countO = 0;
    JButton chosen;

    /**
     * Creates new form JugarTicTacToe
     */
    public JugarTicTacToe() {
        initComponents();
        iniciarComponentes();
    }

    public void iniciarComponentes() {
        botones = new JButton[9];
        curState = new int[botones.length];
        ArrayList<StatesMap> jugadas = StatesMap.mapearJugadas();
        PlayerInstanceTTT pit = new PlayerInstanceTTT(jugadas);
        cpu = new TicTacToePlayer(jugadas.size(), jugadas, new int[10], new int[10]);
        cpu = pit.get(cpu);
        for (int i = 0; i < botones.length; i++) {
            botones[i] = new JButton("");
            botones[i].setBounds(100 + 100 * (i % 3), (i / 3) * 80 + 150, 70, 70);
            botones[i].setBorder(BorderFactory.createLineBorder(Color.black));
            botones[i].addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    JButton b = (JButton) evt.getSource();
                    if (countX < 3) {
                        if (b.getText().equals("")) {
                            b.setText("X");
                            countX++;
                            refrescar();
                        }
                    } else {
                        if (!b.getText().equals("")) {
                            b.setBackground(Color.red);
                            chosen = b;
                        }
                        if (chosen != null) {
                            if (b.getText().equals("")) {
                                b.setText("X");
                                chosen.setText("");
                                chosen.setBackground(Color.lightGray);
                                refrescar();
                                chosen = null;
                            }
                        }
                    }
                }
            });
            this.getContentPane().add(botones[i]);
        }
    }

    public void reiniciar() {
        this.hide();
        JugarTicTacToe j = new JugarTicTacToe();
        j.cpu = this.cpu;
        j.show();
    }

    public void refrescar() {
        for (int i = 0; i < botones.length; i++) {
            JButton jButton = botones[i];
            switch (jButton.getText()) {
                case "X":
                    curState[i] = 1;
                    break;
                case "O":
                    curState[i] = 2;
                    break;
                default:
                    curState[i] = 0;
                    break;
            }
        }
        int idxJugada = indexOf(curState, cpu.jugadas);
        StatesMap sm = cpu.jugadas.get(idxJugada);
        sm.listarPosibilities(2);
//        System.out.println("_____________________");
//        sm.printPosibilities(sm.posibilitiesT2);
//        System.out.println(sm.posibilitiesT2.size());
        curState = sm.posibilitiesT2.get(cpu.desitionP2[idxJugada]);
        sm = new StatesMap(curState, 1);
        for (int i = 0; i < curState.length; i++) {
            JButton jButton = botones[i];
            switch (curState[i]) {
                case 0:
                    jButton.setText("");
                    break;
                case 1:
                    jButton.setText("X");
                    break;
                case 2:
                    jButton.setText("O");
                    break;
            }
        }
        if (sm.ganador != 0) {
            int a = JOptionPane.showConfirmDialog(this, "GANO el P" + sm.ganador
                    + "\n Â¿Desea jugar de nuevo?", "TicTacToe",
                    JOptionPane.YES_NO_OPTION);
            if (a != JOptionPane.YES_OPTION) {
                System.exit(0);
            }
            reiniciar();
        }
        countO++;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Three's Mens morris");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Three's Mens morris");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addComponent(jLabel1)
                .addContainerGap(152, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(360, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JugarTicTacToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JugarTicTacToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JugarTicTacToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JugarTicTacToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JugarTicTacToe().setVisible(true);
            }
        });
    }

    private int indexOf(int[] curState, ArrayList<StatesMap> jugadas) {
        for (int i = 0; i < jugadas.size(); i++) {
            StatesMap statesMap = jugadas.get(i);
            if (Arrays.equals(statesMap.curState, curState)) {
                return i;
            }
        }
        return -1;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
